<?xml version="1.0" encoding="UTF-8"?>
<plugin name="Feed Widget" version_long="10000" version_human="1.0.0" author="Sijad aka Mr.Wosi" website="http://skinod..com" update_check="http://skinod.com/updatechk/sodfeedwidget"><hooks/><tasks/><widgets><widget key="sodFeedWidget" class="\IPS\Widget\StaticCache" restrict="sidebar,cms" default_area="" allow_reuse="1" menu_style="modal" embeddable="1"><![CDATA[<?php
/**
 * @brief		sodFeedWidget Widget
 * @author		<a href='http://www.invisionpower.com'>Invision Power Services, Inc.</a>
 * @copyright	(c) 2001 - SVN_YYYY Invision Power Services, Inc.
 * @license		http://www.invisionpower.com/legal/standards/
 * @package		IPS Social Suite
 * @subpackage	sodFeedWidget
 * @since		14 Mar 2015
 * @version		SVN_VERSION_NUMBER
 */

namespace IPS\plugins\<{LOCATION}>\widgets;

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * sodFeedWidget Widget
 */
class _sodFeedWidget extends \IPS\Widget\StaticCache
{
	/**
	 * @brief	Widget Key
	 */
	public $key = 'sodFeedWidget';
	
	/**
	 * @brief	App
	 */
	public $app = '';
		
	/**
	 * @brief	Plugin
	 */
	public $plugin = '<{ID}>';

	/**
	 * Constructor
	 *
	 * @param	String				$uniqueKey				Unique key for this specific instance
	 * @param	array				$configuration			Widget custom configuration
	 * @param	null|string|array	$access					Array/JSON string of executable apps (core=sidebar only, content=IP.Content only, etc)
	 * @param	null|string			$orientation			Orientation (top, bottom, right, left)
	 * @return	void
	 */
	public function __construct( $uniqueKey, array $configuration, $access=null, $orientation=null )
	{
		parent::__construct( $uniqueKey, $configuration, $access, $orientation );

		if(isset($configuration['sod_feed_reader_cache_time']) && $configuration['sod_feed_reader_cache_time'] > 0 )
			$this->cacheExpiration = $configuration['sod_feed_reader_cache_time'];
	}

	
	/**
	 * Initialise this widget
	 *
	 * @return void
	 */ 
	public function init()
	{
		$this->template( array( \IPS\Theme::i()->getTemplate( 'plugins', 'core', 'global' ), $this->key ) );		
		parent::init();
	}
	
	/**
	 * Specify widget configuration
	 *
	 * @param	null|\IPS\Helpers\Form	$form	Form object
	 * @return	null|\IPS\Helpers\Form
	 */
	public function configuration( &$form=null )
	{
 		if ( $form === null )
		{
	 		$form = new \IPS\Helpers\Form;
 		}

 		$form->add( new \IPS\Helpers\Form\Text( 'sod_feed_reader_title', ( isset( $this->configuration['sod_feed_reader_title'] ) ? $this->configuration['sod_feed_reader_title'] : NULL ), TRUE ) );
		$form->add( new \IPS\Helpers\Form\Url( 'sod_feed_reader_url', ( isset( $this->configuration['sod_feed_reader_url'] ) ?  $this->configuration['sod_feed_reader_url'] : NULL ), TRUE ) );
		$form->add( new \IPS\Helpers\Form\Number( 'sod_feed_reader_count', ( isset( $this->configuration['sod_feed_reader_count'] ) ? $this->configuration['sod_feed_reader_count'] : 10 ), TRUE ) );
		$form->add( new \IPS\Helpers\Form\Number( 'sod_feed_reader_cache_time', ( isset( $this->configuration['sod_feed_reader_cache_time'] ) ? $this->configuration['sod_feed_reader_cache_time'] : 30 ), TRUE ) );

 		return $form;
 	} 
 	
 	 /**
 	 * Ran before saving widget configuration
 	 *
 	 * @param	array	$values	Values from form
 	 * @return	array
 	 */
 	public function preConfig( $values )
 	{
 		$values['sod_feed_reader_url'] = (string) $values['sod_feed_reader_url'];
 		return $values;
 	}

	/**
	 * Render a widget
	 *
	 * @return	string
	 */
	public function render()
	{
		if ( !isset( $this->configuration['sod_feed_reader_url'] ) || empty($this->configuration['sod_feed_reader_url']) ) {
			return '';
		}

		$this->configuration['sod_feed_reader_title'] = isset($this->configuration['sod_feed_reader_title'])?$this->configuration['sod_feed_reader_title']:'';
		$this->configuration['sod_feed_reader_count'] = isset($this->configuration['sod_feed_reader_count'])?$this->configuration['sod_feed_reader_count']:10;

		try {
			$request = \IPS\Http\Url::external( $this->configuration['sod_feed_reader_url'] )->request()->get();

			$i = 0;
			$items = array();
			foreach ( $request->decodeXml()->articles() as $guid => $article )
			{
				if ( isset( $article['title'] ) and isset( $article['link'] ) )
				{
					$items[ $guid ] = array(
						'title'   => $article['title'],
						'content' => \IPS\Text\Parser::parseStatic( $article['content'] ),
					    'link'    => (string) $article['link'],
					    'date'    => ( $article['date'] instanceof \IPS\DateTime ) ? $article['date']->getTimestamp() : $article['date']
					);

					$i++;

				}

				if ( $i >= $this->configuration['sod_feed_reader_count'] )
				{
					break;
				}
			}
		}
		catch( \Exception $e )
		{
			$items = array();
		}
		// return '';
		return $this->output( $items, $this->configuration['sod_feed_reader_title'] );
	}
}]]></widget></widgets><htmlFiles><html filename="sodFeedWidget.phtml">PGlwczp0ZW1wbGF0ZSBwYXJhbWV0ZXJzPSIkaXRlbXMsICR0aXRsZSwgJG9yaWVudGF0aW9uPSd2ZXJ0aWNhbCciIC8+Cnt7aWYgIWVtcHR5KCAkaXRlbXMgKSB9fQoJPGgzIGNsYXNzPSdpcHNXaWRnZXRfdGl0bGUgaXBzVHlwZV9yZXNldCc+eyR0aXRsZX08L2gzPgoJCTxkaXYgY2xhc3M9J2lwc1BhZF9oYWxmIGlwc1dpZGdldF9pbm5lcic+CgkJCTx1bCBjbGFzcz0naXBzRGF0YUxpc3QgaXBzRGF0YUxpc3RfcmVkdWNlZFNwYWNpbmcnPgoJCQkJe3tmb3JlYWNoICRpdGVtcyBhcyAkaXRlbX19CgkJCQkJPGxpIGNsYXNzPSdpcHNEYXRhSXRlbSc+CgkJCQkJCTxkaXYgY2xhc3M9J2lwc0RhdGFJdGVtX21haW4nPgoJCQkJCQkJPGEgaHJlZj0ieyRpdGVtWydsaW5rJ119IiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9J2lwc0RhdGFJdGVtX3RpdGxlIGlwc1R5cGVfYnJlYWsnPnt3b3JkYnJlYWs9IiRpdGVtWyd0aXRsZSddIn08L2E+PGJyPgoJCQkJCQkJPHNwYW4gY2xhc3M9J2lwc1R5cGVfbGlnaHQgaXBzVHlwZV9zbWFsbCc+e2RhdGV0aW1lPSIkaXRlbVsnZGF0ZSddIn08L3NwYW4+CgkJCQkJCTwvZGl2PgoJCQkJCTwvbGk+CgkJCQl7e2VuZGZvcmVhY2h9fQoJCQk8L3VsPgoJCTwvZGl2Pgp7e2VuZGlmfX0=</html></htmlFiles><cssFiles/><jsFiles/><resourcesFiles/><lang><word key="block_sodFeedWidget" js="0">Feed Widget</word><word key="block_sodFeedWidget_desc" js="0">Show latest RSS feed</word><word key="sod_feed_reader_title" js="0">Widget Title</word><word key="sod_feed_reader_url" js="0">RSS Url</word><word key="sod_feed_reader_count" js="0">Number OF Feed</word><word key="sod_feed_reader_cache_time" js="0">Cache Time</word><word key="sod_feed_reader_cache_time_desc" js="0">In Minute</word></lang><versions><version long="10000" human="1.0.0"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * Install Code
 */
class ips_plugins_setup_install
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
		
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
